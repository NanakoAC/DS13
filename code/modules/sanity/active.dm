/*
	This file contains the standard procs for dealing active sanity damage to mobs
*/

/*
	Applies insanity to humans who can see this atom's turf
*/
/atom/proc/visible_sanity_damage(var/quantity = 1, var/limit = 0, var/override_source = null,  var/reason = "spooky things")
	var/list/viewers = get_viewers(maxrange = 10, required_type = /mob/living/carbon/human)
	for (var/mob/living/carbon/human/H as anything in viewers)
		//Ignore necromorphs and lunatics
		if (!H.has_sanity())
			continue


		H.add_active_insanity(quantity, limit, override_source ? override_source : src, reason)



/*
	This one is complicated
	Takes all the same vars as above, but in addition, takes a list of sound parameters.
	This list should be the entire set of params you'd input into playsound. Source, file, volume, vary, extrarange, etc.
	They can be simply ordered, or named in an associative list.

	The sound will be played, and this proc will get back a list of who heard it and how loudly. The sanity damage will be scaled by the volume
*/
/atom/proc/audible_sanity_damage(var/quantity = 1, var/limit = 0, var/override_source = null,  var/reason = "spooky things", var/list/sound_parameters)
	//Listeners is an associative list generated by metered sound proc, in the format mob = volume_they_heard
	var/list/listeners = play_metered_sound(arglist(sound_parameters))
	for (var/mob/living/carbon/human/H in listeners)
		//Ignore necromorphs and lunatics
		if (!H.has_sanity())
			continue

		var/scalar = volume_to_scalar(listeners[H])
		H.add_active_insanity(quantity*scalar, limit, override_source ? override_source : src, reason)


//Takes a volume as an input, returns a multiplier in the range 0..1 based on that volume.
//This is not as simple as dividing by 100, volume scales exponentially. I'm not sure of the math for that,
//so as a compromise, we work on comparisons to the volume defines instead, which scale roughly similarly, though they are tuned by ear
//Its good enough to produce a result that feels right
/proc/volume_to_scalar(var/volume)
	if (volume > VOLUME_HIGH)
		return 1
	else if (volume > VOLUME_MID_HIGH)
		return 0.84
	else if (volume > VOLUME_MID)
		return	0.68
	else if (volume > VOLUME_LOW)
		return 0.52
	else if (volume > VOLUME_QUIET)
		return	0.36
	else if (volume > VOLUME_NEAR_SILENT)
		return	0.20
	else
		return 0
